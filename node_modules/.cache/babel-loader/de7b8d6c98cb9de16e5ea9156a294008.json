{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useRequest = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null); // const request = async (url) => {\n  //     setLoading(true)\n  //     const response = await fetch(url, {method: 'GET', headers: {'Content-type': 'application/json'}})\n  //     if (!response.ok) {\n  //         setError(true)\n  //         throw new Error (`Something go wrong, status - ${response.status}`)\n  //     }\n  //     setLoading(false)\n  //     return response.json()\n  // }\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {\n    'Content-type': 'application/json'\n  }) => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        headers,\n        body\n      });\n\n      if (!response.ok) {\n        throw new Error(`Something go wrong, status - ${response.status}`);\n      }\n\n      setLoading(false);\n      return response.json();\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clearError = () => {\n    _s();\n\n    return useCallback(() => setError(null));\n  };\n\n  _s(clearError, \"epj4qY15NHsef74wNqHIp5fdZmg=\");\n\n  return {\n    request,\n    loading,\n    error\n  };\n};\n\n_s2(useRequest, \"MstwQpYZpw83DP6eQvw4fjC0Jxg=\");\n\nexport default useRequest;","map":{"version":3,"sources":["/Users/artem/Downloads/marvel_starter-2/src/services/useRequest.js"],"names":["useState","useCallback","useRequest","loading","setLoading","error","setError","request","url","method","body","headers","response","fetch","ok","Error","status","json","e","message","clearError"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAAA;;AACrB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC,CAFqB,CAIrB;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAC,OAAOO,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG;AAAE,oBAAgB;AAAlB,GAAnD,KAA+F;AACvHP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACA,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAAEC,QAAAA,MAAF;AAAUE,QAAAA,OAAV;AAAmBD,QAAAA;AAAnB,OAAN,CAA5B;;AACA,UAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAW,gCAA+BH,QAAQ,CAACI,MAAO,EAA1D,CAAN;AACH;;AACDZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOQ,QAAQ,CAACK,IAAT,EAAP;AACH,KAPD,CASA,OAAOC,CAAP,EAAU;AACNd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACY,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACH;AACJ,GAjB0B,EAiBxB,EAjBwB,CAA3B;;AAmBA,QAAME,UAAU,GAAE;AAAA;;AAAA,WAAMnB,WAAW,CAAC,MAAMK,QAAQ,CAAC,IAAD,CAAf,CAAjB;AAAA,GAAlB;;AArCqB,KAqCfc,UArCe;;AAuCrB,SAAO;AAAEb,IAAAA,OAAF;AAAWJ,IAAAA,OAAX;AAAoBE,IAAAA;AAApB,GAAP;AACH,CAxCD;;IAAMH,U;;AA0CN,eAAeA,UAAf","sourcesContent":["import { useState, useCallback } from \"react\"\n\nconst useRequest = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n\n    // const request = async (url) => {\n    //     setLoading(true)\n    //     const response = await fetch(url, {method: 'GET', headers: {'Content-type': 'application/json'}})\n\n    //     if (!response.ok) {\n    //         setError(true)\n    //         throw new Error (`Something go wrong, status - ${response.status}`)\n    //     }\n\n    //     setLoading(false)\n\n    //     return response.json()\n    // }\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-type': 'application/json' } ) => {\n        setLoading(true)\n\n        try {\n            const response = await fetch(url, { method, headers, body })\n            if (!response.ok) {\n                throw new Error(`Something go wrong, status - ${response.status}`)\n            }\n            setLoading(false)\n            return response.json()\n        }\n\n        catch (e) {\n            setLoading(false)\n            setError(e.message)\n            throw e\n        }\n    }, [])\n\n    const clearError =() => useCallback(() => setError(null))\n\n    return { request, loading, error }\n}\n\nexport default useRequest\n"]},"metadata":{},"sourceType":"module"}