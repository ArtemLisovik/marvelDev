{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useRequest = () => {\n  _s();\n\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(false);\n\n  const request = async url => {\n    setLoading(true);\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: ''\n    });\n\n    if (!response.ok) {\n      setError(true);\n      throw new Error(`Something go wrong, status - ${response.status}`);\n    }\n\n    setLoading(false);\n    return response;\n  };\n\n  return {\n    request,\n    loading,\n    error\n  };\n};\n\n_s(useRequest, \"WNnEnM5Qj+Y5NOmhfgmW0r+g8Rc=\");\n\nexport default useRequest; // return {request, responce, loading, error}","map":{"version":3,"sources":["/Users/artem/Downloads/marvel_starter-2/src/services/useRequest.js"],"names":["useState","useRequest","loading","setLoading","error","setError","request","url","response","fetch","method","headers","body","ok","Error","status"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMM,OAAO,GAAG,MAAOC,GAAP,IAAe;AAC3BJ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAACG,MAAAA,MAAM,EAAE,KAAT;AAAgBC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAAzB;AAA+DC,MAAAA,IAAI,EAAE;AAArE,KAAN,CAA5B;;AAEA,QAAI,CAACJ,QAAQ,CAACK,EAAd,EAAkB;AACdR,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,YAAM,IAAIS,KAAJ,CAAY,gCAA+BN,QAAQ,CAACO,MAAO,EAA3D,CAAN;AACH;;AAEDZ,IAAAA,UAAU,CAAC,KAAD,CAAV;AAEA,WAAOK,QAAP;AACH,GAZD;;AAcA,SAAO;AAACF,IAAAA,OAAD;AAAUJ,IAAAA,OAAV;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAnBD;;GAAMH,U;;AAuBN,eAAeA,UAAf,C,CACA","sourcesContent":["import { useState } from \"react\"\n\nconst useRequest = () => {\n    const [loading, setLoading] = useState(null)\n    const [error, setError] = useState(false)\n\n    const request = async (url) => {\n        setLoading(true)\n        const response = await fetch(url, {method: 'GET', headers: {'Content-type': 'application/json'}, body: ''})\n\n        if (!response.ok) {\n            setError(true)\n            throw new Error (`Something go wrong, status - ${response.status}`)\n        }\n\n        setLoading(false)\n\n        return response\n    }\n\n    return {request, loading, error}\n}\n\n\n\nexport default useRequest\n// return {request, responce, loading, error}"]},"metadata":{},"sourceType":"module"}